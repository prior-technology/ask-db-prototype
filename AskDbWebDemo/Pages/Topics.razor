@page "/topics"
@using AskDb.Library
@using AskDbWebDemo.Data
@using AskDb.Model
@using Microsoft.Extensions.Logging
@inject ILogger<Index> _logger
@inject NavigationManager _navigationManager
@inject AnswerServiceCaller _answerServiceCaller
@inject ITopicRepository _topicRepository
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Current User Topics</h1>

<p>
    <table>
        <thead><tr><th>Key</th><th>Description</th><th>File Id</th><th></th><th>Doc Details</th></tr></thead>
        <tbody>
        @foreach (var topic in GetTopics())
        {
            <tr>
            <td>@topic.Key</td><td>@topic.Description</td><td>@topic.FileId</td>
                <td><button @onclick=@RemoveTopicCallback(topic)>Delete</button></td>
                <td><TopicSummary Topic=@topic/></td>
            </tr>
        }      
        </tbody>
    </table>
</p>

<h2>Create Topic</h2>

    <AddTopic UserSid="@UserSid" />
    
<hr />

@code
{

    public string UserSid { get; set; } = null;

    private async Task<string> GetSid()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
        {
            return "";
        }
        var claims = user.Claims;
        return claims.FirstOrDefault(c => c.Type == "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
    }
    
    protected override async Task OnInitializedAsync()
    {
        UserSid = await GetSid();
    }
    
    Action RemoveTopicCallback(Topic topic)
    {
        void Remove() {
            _topicRepository.RemoveTopic(UserSid, topic);
        };

        return Remove;
    }

    IEnumerable<Topic> GetTopics()
    {
        return _topicRepository.GetTopics(UserSid);
    }
}
